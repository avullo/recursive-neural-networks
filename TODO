X Test suite

- use Catch or Boost frameworks

X DPAG

- stores just useful declarations for dealing with vertex and edge traversals and basic functions,
  leave graph comparison functions to more specialised applications, e.g. search in the space of
  graphs with an oracle

- test suite

X Options

- singleton pattern, add options and method as other development proceeds

- read global configuration file/command line arguments (YAML or some other well supported format), look at Boost (reading configs/command line parameters)

- test suite

-- Instance

- constructor from input stream, adapt to different domains by initialising different skeletons
  domain and tranduction are taken from the global options instance

- subclasses to create instances of particular domains, with factory method pattern

- test suite

-- StructuredDomain

X declares useful literals for representing domains and transductions

- test suite

-- Node

- flexible number of state transition networks requires storing a dynamic set of layer activations

- must be able to deal with a generic form of node output/target

-- DataSet

- read configuration parameter to trigger building structured instances differently according to the domain

- methods to read from input streams depending on the domain

-- Recursive NNs

- a single, non templatised, implementation able to build and compute with a dynamic set of state transition functions
  according to the domain

- hidden/output activation functions have their own polymorphic hierarchy with the error minimisation procedure too

- must be able to deal with a generic form of super-source output/target

